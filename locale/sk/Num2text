#=====================================================================
# SQL-Ledger Accounting
# Copyright (C) 2001
#
#  Author: Dieter Simader
#   Email: dsimader@sql-ledger.org
#     Web: http://www.sql-ledger.org
#  Modified by: Medgyesi Aniko
#  **********************************
#  *#MEA1 * Hungarian version       *
#  **********************************
#  Contributors:
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#=====================================================================
#
# this is the default code for the Check package
#
#=====================================================================

sub init {
  my $self = shift;
  %{ $self->{numbername} } =
                   (0 => 'nula',
                    1 => 'jeden',
                    2 => 'dva',
	            3 => 'tri',
		    4 => '¹tyri',
		    5 => 'pä»',
		    6 => '¹es»',
		    7 => 'sedem',
		    8 => 'osem',
		    9 => 'devä»',
		   10 => 'desa»',
		   11 => 'jedenás»',
		   12 => 'dvanás»',
		   13 => 'trinás»',
		   14 => '¹tvrnás»',
		   15 => 'pä»nás»',
		   16 => '¹es»nás»',
		   17 => 'sedemnás»',
		   18 => 'osemnás»',
		   19 => 'devä»nás»',
		   20 => 'dvadsa»',
		   30 => 'tridsa»',
		   40 => '¹tyridsa»',
		   50 => 'pä»desiat',
		   60 => '¹es»desiat',
		   70 => 'sedemdesiat',
		   80 => 'osemdesiat',
		   90 => 'devä»desiat',
                10**2 => 'sto',
                10**3 => 'tisíc',
		10**6 => 'milión',
		10**9 => 'miliard',
	       10**12 => 'bilion');

}


sub num2text {
  my ($self, $amount) = @_;

  return $self->{numbername}{0} unless $amount;

  my @textnumber = ();

  # split amount into chunks of 3
  my @num = reverse split //, abs($amount);
  my @numblock = ();
  my @a;
  my $i;
#MEA1BEG
  my $res;
#MEA1END
  while (@num) {
    @a = ();
    for (1 .. 3) {
      push @a, shift @num;
    }
    push @numblock, join / /, reverse @a;
  }
  while (@numblock) {
    $i = $#numblock;
    @num = split //, $numblock[$i];

    if ($numblock[$i] == 0) {
      pop @numblock;
      next;
    }
    if ($numblock[$i] > 99) {
      push @textnumber, $self->{numbername}{$num[0]};

      # add hundred designation
      push @textnumber, $self->{numbername}{10**2};

      # reduce numblock
      $numblock[$i] -= $num[0] * 100;

    }

    $numblock[$i] *= 1;
    if ($numblock[$i] > 9) {
      # tens
      push @textnumber, $self->format_ten($numblock[$i]);
    } elsif ($numblock[$i] > 0) {
      # ones
      push @textnumber, $self->{numbername}{$numblock[$i]};
    }

    # add thousand, million
    if ($i) {
#MEA1BEG above 2000 need hyphen between treegroups
#    if ($numblock[$i] > 9) {
#       push @textnumber, $self->format_ten($numblock[$i]);
#     } elsif ($numblock[$i] > 0) {
#       push @textnumber, $self->{numbername}{$numblock[$i]};
#     }
      if ($i==1 && $amount < 2000){

        $num = 10**($i * 3);
        push @textnumber, $self->{numbername}{$num};
      } else  {

          $num = 10**($i * 3);
          push @textnumber, $self->{numbername}{$num}."-";
      }
#MEA1END
    }

    pop @numblock;

  }
#MEA1BEG First charachter is uppercase
# join '', @textnumber;
  $res=ucfirst join '', @textnumber;
#MEA1END
#MEA1BEG  remove last hyphen
  $res=~s/(\-)$//;
  return $res;
#MEA1END


}


sub format_ten {
  my ($self, $amount) = @_;

  my $textnumber = "";
  my @num = split //, $amount;
#MEA1BEG above 30 not above 20
# if ($amount > 30) {
  if ($amount > 30) {
#MEA1END
    $textnumber = $self->{numbername}{$num[0]*10};
    $amount = $num[1];
  } else {
    $textnumber = $self->{numbername}{$amount};
    $amount = 0;
  }

  $textnumber .= "".$self->{numbername}{$amount} if $amount;

  $textnumber;

}


1;



